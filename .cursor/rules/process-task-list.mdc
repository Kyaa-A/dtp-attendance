---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Three-Tier Task Implementation

### Atomic Task Implementation (Lowest Level)
- **One atomic task at a time:** Do **NOT** start the next atomic task until you ask the user for permission and they say "yes" or "y"
- **Atomic Task Completion Protocol:**
  1. When you finish an **atomic task**, immediately mark it as completed by changing `[ ]` to `[x]`
  2. Verify all acceptance criteria are met before marking complete
  3. Stop and wait for user approval before starting next atomic task

### Story Task Completion (Middle Level)  
- **Story Completion Protocol:** When **all** atomic tasks under a story are `[x]`:
  1. **Test Story Integration:** Run relevant tests for the story scope
  2. **Stage Changes:** `git add .` for all story-related files
  3. **Clean Up:** Remove temporary files and temporary code
  4. **Commit Story:** Use conventional commit format with story context:
     ```
     git commit -m "feat(auth): implement registration form components" -m "- Created RegisterForm.tsx with validation" -m "- Added registration page with routing" -m "- Includes comprehensive form validation" -m "Story 1.1 - FR-01 User Registration"
     ```
  5. **Mark Story Complete:** Change story `[ ]` to `[x]`

### Epic Task Completion (Highest Level)
- **Epic Completion Protocol:** When **all** stories under an epic are `[x]`:
  1. **Run Full Test Suite:** Execute complete project test suite
  2. **Integration Verification:** Verify epic works end-to-end
  3. **Epic Commit:** Create final epic completion commit:
     ```
     git commit -m "feat: complete user registration system epic" -m "- All registration functionality implemented" -m "- Frontend and backend integration complete" -m "- Comprehensive test coverage" -m "Epic 1.0 - FR-01 Complete"
     ```
  4. **Mark Epic Complete:** Change epic `[ ]` to `[x]`

### Implementation Flow
1. Work through atomic tasks sequentially within a story
2. Complete entire story before moving to next story  
3. Complete entire epic before moving to next epic
4. Always stop after each atomic task for user approval

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a oneâ€‘line description of its purpose.

## AI Instructions for Three-Tier Task Management

When working with three-tier task lists, the AI must:

1. **Task Navigation:**
   - Always check current position in the three-tier hierarchy
   - Work on atomic tasks sequentially within stories
   - Complete stories before moving to next story within an epic
   - Complete epics before moving to next epic

2. **Progress Tracking:**
   - Update task list file after each atomic task completion
   - Mark atomic tasks `[x]` immediately upon completion
   - Mark stories `[x]` only when ALL atomic tasks under it are complete
   - Mark epics `[x]` only when ALL stories under it are complete

3. **Quality Assurance:**
   - Verify acceptance criteria before marking atomic tasks complete
   - Run story-level tests before marking stories complete
   - Run full test suite before marking epics complete
   - Ensure all dependencies are met before starting any task

4. **File Management:**
   - Keep "Relevant Files" section updated with any new files created
   - Update file descriptions if functionality changes
   - Add newly discovered files during implementation

5. **Communication Protocol:**
   - Stop after EVERY atomic task completion
   - Wait for explicit user approval ("yes", "y", "go") before proceeding
   - Report what was accomplished and what's next
   - Ask for permission before starting the next atomic task

6. **Commit Strategy:**
   - Commit after completing each story (when all atomic tasks in story are done)
   - Commit after completing each epic (when all stories in epic are done)
   - Use conventional commit format with proper scope and context
   - Reference PRD functional requirements in commit messages